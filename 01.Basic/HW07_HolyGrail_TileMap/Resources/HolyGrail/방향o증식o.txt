#include "HelloWorldScene.h"

USING_NS_CC;

Scene* HelloWorld::createScene()
{
	auto scene = Scene::create();
	auto layer = HelloWorld::create();
	scene->addChild(layer);
	return scene;
}

bool HelloWorld::init()
{
	if (!LayerColor::initWithColor(Color4B(255, 255, 255, 255)))
	{
		return false;
	}
	/////////////////////////////////////////////
	// 화면 사이즈 구하기
	winSize = Director::getInstance()->getWinSize();

	// 타일맵 읽어오기
	tmap = TMXTiledMap::create("TileMaps/HolyGrail.tmx");
	background = tmap->getLayer("Background");
	metainfo = tmap->getLayer("MetaInfo");
//	metainfo->setVisible(false);
	this->addChild(tmap, 0, 11);// z-order를 -1로 지정하면 화면이 나오지 않는다.

	// 타일앱에서 Object라고 지정한 오브젝트 레이어의 객체들 가져오기
	TMXObjectGroup* objects = tmap->getObjectGroup("Objects");

	// 오브젝트 레이어에서 SpqwnPoint 라고 지정한 속성값 읽어오기
	ValueMap HeroPoint = objects->getObject("HeroPoint");
	ValueMap W_Sword001Point = objects->getObject("W_Sword001Point");

	int xHero = HeroPoint["x"].asInt();
	int yHero = HeroPoint["y"].asInt();
	int xW_Sword001 = W_Sword001Point["x"].asInt();
	int yW_Sword001 = W_Sword001Point["y"].asInt();

	// SpawnPoint의 위치로 생성할 드래곤의 위치 지정하기
	HeroPosition = Vec2(xHero, yHero);
	W_Sword001Position = Vec2(xW_Sword001, yW_Sword001);

	// 드래곤을 만든다.
	this->createHero();
	this->createW_Sword001();

	return true;
}

void HelloWorld::onEnter()
{
	Layer::onEnter();

	// 싱글 터치 모드로 터치 리스너 등록
	auto listener = EventListenerTouchOneByOne::create();
	// Swallow touches only available in OneByOne mode.
	// 핸들링된 터치 이벤트를 터치 이벤트 array에서 지우겠다는 의미다.
	listener->setSwallowTouches(true);

	listener->onTouchBegan = CC_CALLBACK_2(HelloWorld::onTouchBegan, this);
	listener->onTouchEnded = CC_CALLBACK_2(HelloWorld::onTouchEnded, this);

	// The priority of the touch listener is based on the draw order of sprite
	// 터치 리스너의 우선순위를 (노드가) 화면에 그려진 순서대로 한다.
	_eventDispatcher->addEventListenerWithSceneGraphPriority(listener, this);
}

void HelloWorld::onExit()
{
	_eventDispatcher->removeEventListenersForType(EventListener::Type::TOUCH_ONE_BY_ONE);

	Layer::onExit();
}

void HelloWorld::createHero()
{
	// 움직이는 사용자 넣기 시작
	auto cache = SpriteFrameCache::getInstance();
	cache->addSpriteFramesWithFile("Images/Holygrail.plist");

	Vector<SpriteFrame*> animFrams;

	char str[100] = { 0 };
	for (int i = 1; i < 13; i++)
	{
		sprintf(str, "Hero%02d.png", i);
		SpriteFrame* frame = cache->getSpriteFrameByName(str);
		if (i < 4)
		{
			animFrams.pushBack(frame);
		}
		/*else if (i < 7)
		{
			animHeroLeft.pushBack(frame);
		}
		else if (i < 10)
		{
			animHeroRight.pushBack(frame);
		}
		else
		{
			animHeroUp.pushBack(frame);
		}*/
	}
	pHero = Sprite::createWithSpriteFrameName("Hero01.png");
	pHero->setPosition(HeroPosition);
	this->addChild(pHero);

	pHero->setScale(0.7);

	Heroanimation = Animation::createWithSpriteFrames(animFrams, 0.3f);
	Heroanimate = Animate::create(Heroanimation);
	Herorep = RepeatForever::create(Heroanimate);
	pHero->runAction(Herorep);
}

void HelloWorld::createW_Sword001()
{
	auto cache = SpriteFrameCache::getInstance();
	cache->addSpriteFramesWithFile("Images/Holygrail.plist");

	Vector<SpriteFrame*> anim;

	char str[100] = { 0 };
	for (int i = 1; i < 2; i++)
	{
		sprintf(str, "W_Sword%03d.png", i);
		SpriteFrame* frame = cache->getSpriteFrameByName(str);

		anim.pushBack(frame);
	}
	pW_Sword001 = Sprite::createWithSpriteFrameName("W_Sword001.png");
	pW_Sword001->setPosition(W_Sword001Position);
	this->addChild(pW_Sword001);

	pW_Sword001->setScale(0.7);

	/*Heroanimation = Animation::createWithSpriteFrames(animHeroDown, 0.3f);
	Heroanimate = Animate::create(Heroanimation);
	Herorep = RepeatForever::create(Heroanimate);
	pHero->runAction(Herorep);*/
}

bool HelloWorld::onTouchBegan(Touch* touch, Event* event)
{
	return true;
}

void HelloWorld::onTouchEnded(Touch* touch, Event* event)
{
	auto touchPoint = touch->getLocation();
	touchPoint = this->convertToNodeSpace(touchPoint);

	Vec2 playerPos = pHero->getPosition();

	Vec2 diff = touchPoint - playerPos;

	if (abs(diff.x) > abs(diff.y))
	{
		if (diff.x > 0)
		{
			playerPos.x += tmap->getTileSize().width;
			moveposition.x = tmap->getTileSize().width;
			moveposition.y = 0;
			// 드래곤의 방향을 바꿔준다.
			auto cache = SpriteFrameCache::getInstance();
			cache->addSpriteFramesWithFile("Images/Holygrail.plist");

			Vector<SpriteFrame*> animFrams;

			char str[100] = { 0 };
			for (int i = 1; i < 13; i++)
			{
				sprintf(str, "Hero%02d.png", i);
				SpriteFrame* frame = cache->getSpriteFrameByName(str);
				/*if (i < 4)
				{
				animFrams.pushBack(frame);
				}*/
				/*if (i > 3 && i < 7)
				{
				animFrams.pushBack(frame);
				}*/
				if (i > 6 && i < 10)
				{
					animFrams.pushBack(frame);
				}
				/*else
				{
				animHeroUp.pushBack(frame);
				}*/
			}
			pHero = Sprite::createWithSpriteFrameName("Hero07.png");
			pHero->setPosition(playerPos);
			this->addChild(pHero);

			pHero->setScale(0.7);

			Heroanimation = Animation::createWithSpriteFrames(animFrams, 0.3f);
			Heroanimate = Animate::create(Heroanimation);
			Herorep = RepeatForever::create(Heroanimate);
			pHero->runAction(Herorep);
		}
		else
		{
			playerPos.x -= tmap->getTileSize().width;
			moveposition.x = 0 - tmap->getTileSize().width;
			moveposition.y = 0;

			// 드래곤의 방향을 바꿔준다.
			auto cache = SpriteFrameCache::getInstance();
			cache->addSpriteFramesWithFile("Images/Holygrail.plist");

			Vector<SpriteFrame*> animFrams;

			char str[100] = { 0 };
			for (int i = 1; i < 13; i++)
			{
				sprintf(str, "Hero%02d.png", i);
				SpriteFrame* frame = cache->getSpriteFrameByName(str);
				/*if (i < 4)
				{
				animFrams.pushBack(frame);
				}*/
				if (i > 3 && i < 7)
				{
					animFrams.pushBack(frame);
				}
				/*else if (i < 10)
				{
				animHeroRight.pushBack(frame);
				}
				else
				{
				animHeroUp.pushBack(frame);
				}*/
			}
			pHero = Sprite::createWithSpriteFrameName("Hero04.png");
			pHero->setPosition(playerPos);
			this->addChild(pHero);

			pHero->setScale(0.7);

			Heroanimation = Animation::createWithSpriteFrames(animFrams, 0.3f);
			Heroanimate = Animate::create(Heroanimation);
			Herorep = RepeatForever::create(Heroanimate);
			pHero->runAction(Herorep);
		}
	}
	else
	{
		if (diff.y > 0)
		{
			playerPos.y += tmap->getTileSize().height;
			moveposition.x = 0;
			moveposition.y = tmap->getTileSize().height;

			auto cache = SpriteFrameCache::getInstance();
			cache->addSpriteFramesWithFile("Images/Holygrail.plist");

			Vector<SpriteFrame*> animFrams;

			char str[100] = { 0 };
			for (int i = 1; i < 13; i++)
			{
				sprintf(str, "Hero%02d.png", i);
				SpriteFrame* frame = cache->getSpriteFrameByName(str);
				/*if (i < 4)
				{
				animFrams.pushBack(frame);
				}*/
				/*if (i > 3 && i < 7)
				{
				animFrams.pushBack(frame);
				}*/
				/*if (i > 6 && i < 10)
				{
					animFrams.pushBack(frame);
				}*/
				if (i > 9 && i < 13)
				{
				animFrams.pushBack(frame);
				}
			}
			pHero = Sprite::createWithSpriteFrameName("Hero10.png");
			pHero->setPosition(playerPos);
			this->addChild(pHero);

			pHero->setScale(0.7);

			Heroanimation = Animation::createWithSpriteFrames(animFrams, 0.3f);
			Heroanimate = Animate::create(Heroanimation);
			Herorep = RepeatForever::create(Heroanimate);
			pHero->runAction(Herorep);
		}
		else
		{
			playerPos.y -= tmap->getTileSize().height;
			moveposition.x = 0;
			moveposition.y = 0 - tmap->getTileSize().height;

			auto cache = SpriteFrameCache::getInstance();
			cache->addSpriteFramesWithFile("Images/Holygrail.plist");

			Vector<SpriteFrame*> animFrams;

			char str[100] = { 0 };
			for (int i = 1; i < 13; i++)
			{
				sprintf(str, "Hero%02d.png", i);
				SpriteFrame* frame = cache->getSpriteFrameByName(str);
				if (i < 4)
				{
				animFrams.pushBack(frame);
				}
				/*if (i > 3 && i < 7)
				{
				animFrams.pushBack(frame);
				}*/
				/*if (i > 6 && i < 10)
				{
				animFrams.pushBack(frame);
				}*/
				/*if (i > 9 && i < 13)
				{
					animFrams.pushBack(frame);
				}*/
			}
			pHero = Sprite::createWithSpriteFrameName("Hero01.png");
			pHero->setPosition(playerPos);
			this->addChild(pHero);

			pHero->setScale(0.7);

			Heroanimation = Animation::createWithSpriteFrames(animFrams, 0.3f);
			Heroanimate = Animate::create(Heroanimation);
			Herorep = RepeatForever::create(Heroanimate);
			pHero->runAction(Herorep);
		}
	}

	if (playerPos.x <= (tmap->getMapSize().width * tmap->getTileSize().width) &&
		playerPos.y <= (tmap->getMapSize().height * tmap->getTileSize().height) &&
		playerPos.y >= 0 &&
		playerPos.x >= 0)
	{
		// 드래곤의 새로운 위치 지정
		//dragon->setPosition(playerPos);
		this->setPlayerPosition(playerPos);
	}

	// 드래곤의 위치에 맞춰 화면 위치 조정
	//this->setViewpointCenter(pHero->getPosition());
}

void HelloWorld::setViewpointCenter(Vec2 position)
{
	// 파라미터로 들어오는 위치에 맞춰 화면을 움직인다.
	int x = MAX(position.x, winSize.width / 2);
	int y = MAX(position.y, winSize.height / 2);

	x = MIN(x, (tmap->getMapSize().width * tmap->getTileSize().width) - winSize.width / 2);
	y = MIN(y, (tmap->getMapSize().height * tmap->getTileSize().height) - winSize.height / 2);

	Vec2 actualPosition = Vec2(x, y);
	Vec2 centerOfView = Vec2(winSize.width / 2, winSize.height / 2);
	Vec2 viewPoint = centerOfView - actualPosition;

	this->setPosition(viewPoint);
}

// 현재 탭으로 선택된 타일의 위치를 가져온다.
Vec2 HelloWorld::tileCoordForPosition(Vec2 position)
{
	int x = position.x / tmap->getTileSize().width;
	int y = ((tmap->getMapSize().height * tmap->getTileSize().height) - position.y) / tmap->getTileSize().height;
	return Vec2(x, y);
}

void HelloWorld::setPlayerPosition(Vec2 position)
{
	// 추가된 부분 시작 -----------------------------------------

	// 탭된 위치 구하기
	Vec2 tileCoord = this->tileCoordForPosition(position);
	log("x: %d, y: %d", position.x, position.y);
	// 현재 위치의 Tile GID 구하기
	int tileGid = this->metainfo->getTileGIDAt(tileCoord);
	log("tileGid: %d", tileGid);

	if (tileGid)
	{
		// 타일맵에서 GID에 해당하는 부분의 속성 읽어 오기
		Value& properties = tmap->getPropertiesForGID(tileGid);

		if (!properties.isNull())
		{
			std::string wall = properties.asValueMap()["Wall"].asString();
			if (wall == "YES")
			{
				log("Wall...");
				return;
			}

			std::string item = properties.asValueMap()["Items"].asString();
			if (item == "W_Sword001")
			{
				this->metainfo->removeTileAt(tileCoord);
//				items->removeTileAt(tileCoord);
				pW_Sword001->setVisible(false);

				log("아이템 획득!!! 이 메시지가 여러 번 출력되는지 확인");
				return;
			}
		}
	}

	// 추가된 부분 끝 ----------------------------------------------
	// 파라미터로 들어온 위치에 드래곤 위치 조정하기
	//auto myActionForward = MoveBy::create(1, moveposition);
	////auto myActionBack = myActionForward->reverse();
	//auto myAction = Sequence::create(myActionForward, nullptr);
	//auto rep2 = RepeatForever::create(myAction);

	//moveposition.x = 0;
	//moveposition.y = 0;
	//pHero->runAction(rep2);


	pHero->setPosition(position);
}
